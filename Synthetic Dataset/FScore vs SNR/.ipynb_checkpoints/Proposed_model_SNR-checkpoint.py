{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "af60c90e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from numpy import linalg as LA\n",
    "from numpy.linalg import matrix_power as MP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "86014ed9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import scipy\n",
    "from scipy.spatial.distance import cdist\n",
    "from scipy.io import savemat, loadmat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "499c674e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "import sys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1fb9eeaf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from keras.callbacks import EarlyStopping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bbba8920",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TF Version: 2.14.0\n"
     ]
    }
   ],
   "source": [
    "print(f\"TF Version: {tf.__version__}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c9dbefa0",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = loadmat('./Dataset/X_train.mat')['X_Ground']\n",
    "Adj_train = loadmat('./Dataset/Adj.mat')['A_Ground']\n",
    "\n",
    "N, T = X_train.shape\n",
    "\n",
    "# # Making the data zero-mean across time samples\n",
    "# print(\"Mean before operation:\\n\", np.mean(X_train, axis = 1))\n",
    "# X_train = X_train - np.mean(X_train, axis = 1).reshape([N, 1])\n",
    "# print(\"\\nMean after operation:\\n\", np.mean(X_train, axis = 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ede5a608",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(np.array(X_train).flatten(), bins = 'auto')\n",
    "plt.xlabel(\"X\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.title(\"Histogram of generated data\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "657eceae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.2715994 , -0.34698654, -0.25635362, -0.27250192,  0.00535328,\n",
       "        0.03975806,  0.38965817, -0.27827508, -0.0962416 , -0.27312746,\n",
       "       -0.07323742,  0.20335729,  0.08817357,  0.17127695,  0.32892584,\n",
       "        0.10630511,  0.18448438,  0.15984512, -0.15441736, -0.13817446])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "variance = np.var(X_train, axis = 1)\n",
    "np.random.normal(loc = 0, scale = variance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "46c57d95",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 700x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize = (7, 6))\n",
    "rows, cols = np.where(Adj_train == 1)\n",
    "edges = zip(rows.tolist(), cols.tolist())\n",
    "\n",
    "gr = nx.Graph()\n",
    "gr.add_edges_from(edges)\n",
    "nx.draw_networkx(gr, node_size = 400)\n",
    "\n",
    "plt.title(\"Visualisation of graph\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a4dbe997",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20 500\n"
     ]
    }
   ],
   "source": [
    "print(N, T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c4c988fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tf.Tensor(\n",
      "[[-1.  0.  0. ...  0.  0.  0.]\n",
      " [ 1. -1.  0. ...  0.  0.  0.]\n",
      " [ 0.  1. -1. ...  0.  0.  0.]\n",
      " ...\n",
      " [ 0.  0.  0. ... -1.  0.  0.]\n",
      " [ 0.  0.  0. ...  1. -1.  0.]\n",
      " [ 0.  0.  0. ...  0.  1.  1.]], shape=(500, 500), dtype=float32)\n"
     ]
    }
   ],
   "source": [
    "dt = np.zeros([T - 1, T])\n",
    "\n",
    "for i in range(T - 1):\n",
    "    dt[i, i] = -1\n",
    "    dt[i, i - 1] = 1\n",
    "\n",
    "d = dt.T\n",
    "d = np.concatenate((d, np.zeros([T, 1])), axis = 1) \n",
    "d[T - 1, T - 1] = -1\n",
    "d = d.T\n",
    "d[T - 1, T - 1] = 1 \n",
    "d[-1, -2] = 1\n",
    "d[0, -1] = 0\n",
    "\n",
    "d = tf.convert_to_tensor(d, dtype = \"float32\")\n",
    "\n",
    "print(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b3cda9a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "Mul = np.eye(N) - np.ones([N, N])\n",
    "Mul = tf.convert_to_tensor(Mul, dtype = \"float32\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "337d29df",
   "metadata": {},
   "outputs": [],
   "source": [
    "def adj_to_laplacian(AdjL):\n",
    "    tmp = np.array(AdjL, dtype = \"float32\")\n",
    "    return np.diag(np.sum(tmp, axis = 0)) - tmp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "88ee06ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "def initial_graph(X_training, N, top_values):\n",
    "    distance_matrix = cdist(X_training, X_training, metric = 'euclidean')\n",
    "    \n",
    "    sorted_indices = distance_matrix.argsort(1)\n",
    "    TAdj = np.zeros([N, N])\n",
    "    \n",
    "    for i in range(N):\n",
    "        for j in range(1, top_values):\n",
    "            k = sorted_indices[i][j]\n",
    "            TAdj[i][k] = 1\n",
    "    \n",
    "    TAdj = (TAdj + TAdj.T) / 2\n",
    "    TAdj = np.where(TAdj > 0.1, 1, 0)\n",
    "    \n",
    "    Laplacian_init = np.diag(np.sum(TAdj, 1)) - TAdj\n",
    "    \n",
    "    return Laplacian_init"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8c7d6e82",
   "metadata": {},
   "outputs": [],
   "source": [
    "coeffs = 0\n",
    "psi_cost = 0\n",
    "Laplacian = 0\n",
    "A_transform_cost = 0\n",
    "\n",
    "model_pred = []\n",
    "loss_model = []\n",
    "learned_graph = []\n",
    "mse_known_list = []\n",
    "mse_unknown_list = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ff4c8c85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.e-03 1.e-06 1.e-12 1.e-05]\n",
      " [1.e-03 1.e-06 1.e-11 1.e-05]\n",
      " [1.e-03 1.e-06 1.e-11 1.e-05]\n",
      " [1.e-03 1.e-06 1.e-11 1.e-05]\n",
      " [1.e-03 1.e-06 1.e-11 1.e-05]\n",
      " [1.e-03 1.e-06 1.e-11 1.e-05]\n",
      " [1.e-03 1.e-06 1.e-11 1.e-05]\n",
      " [1.e-03 1.e-06 1.e-11 1.e-05]\n",
      " [1.e-03 1.e-06 1.e-11 1.e-05]\n",
      " [1.e-03 1.e-06 1.e-11 1.e-05]\n",
      " [1.e-03 1.e-06 1.e-11 1.e-05]\n",
      " [1.e-03 1.e-06 1.e-11 1.e-05]\n",
      " [1.e-03 1.e-06 1.e-11 1.e-05]]\n"
     ]
    }
   ],
   "source": [
    "coeffs_list = np.load(\"./Outputs/SNR_cost_func_coeffs.npy\")\n",
    "print(coeffs_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "892304e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# A - Target, B - Predicted\n",
    "def costfunc(A, B):\n",
    "    global coeffs\n",
    "    global X_train\n",
    "    global psi_cost\n",
    "    global Laplacian\n",
    "    global A_transform_cost\n",
    "\n",
    "    B_tmp = tf.squeeze(B)\n",
    "    data_fidelity = (tf.norm(tf.multiply(psi_cost, (X_train - B))) ** 2) * coeffs[0]\n",
    "    smoothness = tf.linalg.trace(tf.transpose(B_tmp) @ Laplacian @ B_tmp @ A_transform_cost) * coeffs[1]\n",
    "    L_cost = (tf.norm(Laplacian) ** 2) * coeffs[2]\n",
    "    Z_cost = (tf.norm(A_transform_cost) ** 2) * coeffs[3]\n",
    "    \n",
    "    tmp = (smoothness) + (data_fidelity) + (L_cost) + (Z_cost)\n",
    "    \n",
    "    global loss_model\n",
    "    loss_model.append(tmp)\n",
    "    \n",
    "    return tmp\n",
    "    \n",
    "def costfunc1(A, B):\n",
    "    global X_train\n",
    "    global psi_cost\n",
    "    \n",
    "    data_fidelity = (tf.norm(tf.multiply(psi_cost, (X_train - B))) ** 2)\n",
    "    return (data_fidelity)\n",
    "\n",
    "def costfunc2(A, B):\n",
    "    global Laplacian\n",
    "    global A_transform_cost\n",
    "    \n",
    "    B_tmp = tf.squeeze(B)\n",
    "    smoothness = tf.linalg.trace(tf.transpose(B_tmp) @ Laplacian @ B_tmp @ A_transform_cost)\n",
    "    \n",
    "    return (smoothness)\n",
    "\n",
    "def costfunc3(A, B):\n",
    "    global Laplacian\n",
    "    \n",
    "    L_cost = (tf.norm(Laplacian) ** 2)\n",
    "    \n",
    "    return (L_cost)\n",
    "\n",
    "def costfunc4(A, B):\n",
    "    global A_transform_cost\n",
    "    \n",
    "    Z_cost = (tf.norm(A_transform_cost) ** 2)\n",
    "    \n",
    "    return (Z_cost)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0d6e587e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def mse_unknown(A, B):\n",
    "    \n",
    "    global psi_cost\n",
    "    psi = psi_cost\n",
    "    \n",
    "    psid = tf.convert_to_tensor(np.ones([N, T], dtype = float) - psi, dtype = \"float32\")\n",
    "    mse_unk = (LA.norm(np.multiply(psid, (X_train - B))) ** 2) / np.sum(psid.numpy().flatten())\n",
    "    \n",
    "    global mse_unknown_list\n",
    "    mse_unknown_list.append(mse_unk)\n",
    "    \n",
    "    return mse_unk\n",
    "\n",
    "def mse_known(A, B):\n",
    "    \n",
    "    global psi_cost\n",
    "    psi = psi_cost\n",
    "    \n",
    "    mse_kn = (LA.norm(np.multiply(psi, (X_train - B))) ** 2) / np.sum(psi.numpy().flatten())\n",
    "    \n",
    "    global model_pred\n",
    "    model_pred.append([A.numpy(), B.numpy()])\n",
    "    \n",
    "    global mse_known_list\n",
    "    mse_known_list.append(mse_kn)\n",
    "    \n",
    "    return mse_kn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7a9a2df4",
   "metadata": {},
   "outputs": [],
   "source": [
    "callb = EarlyStopping(monitor = 'loss', mode = 'min', min_delta = 0.0001, verbose = 1, patience = 10)\n",
    "\n",
    "def scheduler(epoch, lr):\n",
    "    if epoch < 10:\n",
    "        return lr\n",
    "    else:\n",
    "        return lr / lr_decay_factor\n",
    "\n",
    "lr_scheduler = tf.keras.callbacks.LearningRateScheduler(scheduler)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "26575023",
   "metadata": {},
   "outputs": [],
   "source": [
    "# class ProposedModel(tf.keras.Model):\n",
    "    \n",
    "#     def __init__(self, L_init, reg_init, loops_init, d_init, p_init, alpha_init, beta_init, threshold_in, **kwargs):\n",
    "#         super(ProposedModel, self).__init__(**kwargs)\n",
    "        \n",
    "#         self.p1_init = tf.constant(p_init[0], shape = (1, 1), dtype = \"float32\")\n",
    "#         self.p1 = tf.Variable(initial_value = self.p1_init, trainable = True, name = \"p1\")\n",
    "        \n",
    "#         self.p2_init = tf.constant(p_init[1], shape = (1, 1), dtype = \"float32\")\n",
    "#         self.p2 = tf.Variable(initial_value = self.p2_init, trainable = True, name = \"p2\")\n",
    "        \n",
    "#         self.L_in = L_init\n",
    "#         self.preg = reg_init\n",
    "#         self.loops = loops_init\n",
    "#         self.d_int = d_init\n",
    "#         self.alp = alpha_init\n",
    "#         self.bet = beta_init\n",
    "#         self.threshold_init = threshold_in\n",
    "        \n",
    "#     def data_inpainting(self, psi, Y, Lk, AAT):\n",
    "#         loop_b, reg = self.loops[1], self.preg\n",
    "\n",
    "#         Xk = tf.zeros_like(Y)\n",
    "#         Zk = -(tf.multiply(psi, Xk) - Y + (2 * reg * (Lk @ Xk @ AAT)))\n",
    "        \n",
    "#         for i in range(loop_b):\n",
    "#             fdx_xk = tf.multiply(psi, Xk) - Y + (2 * reg * (Lk @ Xk @ AAT))\n",
    "#             fdx_zk = tf.multiply(psi, Zk) - Y + (2 * reg * (Lk @ Zk @ AAT))\n",
    "            \n",
    "#             # print(\"Xk: \", np.array(tf.multiply(psi, Xk) - Y)[0, 0], \n",
    "#                   # np.array(2 * reg * (Lk @ Xk @ AAT))[0, 0])\n",
    "#             # print(\"Zk: \", np.array(tf.multiply(psi, Zk) - Y)[0, 0], \n",
    "#                   # np.array(2 * reg * (Lk @ Zk @ AAT))[0, 0], \"\\n\")\n",
    "            \n",
    "#             tau = tf.linalg.trace(tf.transpose(fdx_xk) @ Zk) / tf.linalg.trace(tf.transpose((Y + fdx_zk)) @ Zk)\n",
    "\n",
    "#             # print(\"Xk_1: \", np.array(Xk)[0, 0], np.array(tau * Zk)[0, 0], \"\\n\")\n",
    "            \n",
    "#             Xk_1 = Xk - (tau * Zk)\n",
    "\n",
    "#             fdx_xk_1 = tf.multiply(psi, Xk_1) - Y + (2 * reg * (Lk @ Xk_1 @ AAT))\n",
    "#             gamma = (tf.norm(fdx_xk_1) ** 2) / (tf.norm(fdx_xk) ** 2)\n",
    "#             # print(\"Gamma: \", np.array(gamma * Zk)[0, 0], np.array(fdx_xk_1)[0, 0], \"\\n\")\n",
    "#             Zk_1 = (gamma * Zk) - fdx_xk_1\n",
    "\n",
    "#             Xk = Xk_1\n",
    "#             Zk = Zk_1\n",
    "            \n",
    "#         # print(\"\\nLoop ends\\n\\n\")\n",
    "        \n",
    "#         return Xk_1\n",
    "    \n",
    "#     def graph_learning(self, X, Lk, AAT):\n",
    "#         loop_c, alpha, beta = self.loops[2], self.alp, self.bet\n",
    "        \n",
    "#         X_AAT_XT = tf.matmul(X, tf.matmul(AAT, tf.transpose(X)))\n",
    "        \n",
    "#         for i in range(loop_c):\n",
    "            \n",
    "#             # print(\"Beta: \", np.array(coeffs[1] * X_AAT_XT)[0, 0], np.array(beta * Lk)[0, 0])\n",
    "            \n",
    "#             fdL_Lk = coeffs[1] * X_AAT_XT + (beta * Lk)\n",
    "            \n",
    "#             ###### This is required\n",
    "#             # fdx_Lk = tf.transpose(tf.transpose(fdL_Lk) - tf.reduce_mean(fdL_Lk, 1))\n",
    "#             fdL_Lk = fdL_Lk - tf.reshape(tf.reduce_mean(fdL_Lk, 1), [N, 1])\n",
    "#             fdL_Lk = (fdL_Lk + tf.transpose(fdL_Lk)) / 2\n",
    "#             ######\n",
    "#             # print(\"Alpha: \", np.array(Lk[0, 0]), np.array(fdL_Lk[0, 0]), \"\\n\")\n",
    "#             # print(alpha)\n",
    "#             Lk_1 = Lk - (alpha * fdL_Lk)\n",
    "            \n",
    "#             ######\n",
    "#             Adj_k1 = tf.multiply(Mul, Lk_1)\n",
    "#             Adj_k1 = tf.nn.relu(Adj_k1)\n",
    "#             Lk_1 = tf.linalg.diag(tf.math.reduce_sum(Adj_k1, 1)) - Adj_k1\n",
    "#             ######\n",
    "            \n",
    "#             Lk = Lk_1\n",
    "#         # print(\"\\nLoop end\\n\\n\")\n",
    "#         return Lk\n",
    "    \n",
    "#     def call(self, y):\n",
    "\n",
    "#         psi = y[0,:,T:]\n",
    "#         global psi_cost\n",
    "#         psi_cost = psi\n",
    "        \n",
    "#         psi = tf.convert_to_tensor(psi, dtype = \"float32\")\n",
    "        \n",
    "#         X_in = y[0,:,:T]\n",
    "#         X_in = psi * tf.convert_to_tensor(X_in, dtype = \"float32\")\n",
    "#         Y = X_in\n",
    "        \n",
    "#         d = self.d_int\n",
    "#         LT = tf.matmul(d, tf.transpose(d))\n",
    "#         LT = tf.convert_to_tensor(LT, dtype = \"float32\")\n",
    "        \n",
    "#         A_transform = tf.eye(T) + (self.p1 * MP(LT, 1)) + (self.p2 * MP(LT, 2))\n",
    "#         AAT = A_transform\n",
    "        \n",
    "#         global A_transform_cost\n",
    "#         A_transform_cost = AAT\n",
    "        \n",
    "#         loop_a = self.loops[0]\n",
    "#         threshold = self.threshold_init\n",
    "#         Lk = self.L_in\n",
    "        \n",
    "#         for i in range(loop_a):\n",
    "            \n",
    "#             Xk_1 = self.data_inpainting(psi, Y, Lk, AAT)\n",
    "            \n",
    "#             Xk_1_gt = X_in + tf.multiply((tf.ones(psi.shape) - psi), Xk_1)\n",
    "#             print(np.array(Lk)[0,:])\n",
    "#             Lk_1 = self.graph_learning(Xk_1_gt, Lk, AAT)\n",
    "#             print(Lk_1.numpy()[0,:])\n",
    "            \n",
    "#             Adj = tf.linalg.diag(tf.linalg.diag_part(Lk_1)) - Lk_1 # Gives adjacency\n",
    "            \n",
    "#             n = tf.math.count_nonzero(Adj, dtype=\"float32\")\n",
    "#             mean = tf.math.reduce_sum(Adj) / n\n",
    "#             Adj = tf.math.subtract(Adj, (threshold * mean)) # Ensures the sparsity of learned graph\n",
    "            \n",
    "#             Adj = tf.nn.relu(Adj)\n",
    "#             # Adj = tf.math.sign(Adj)\n",
    "            \n",
    "#             Lk_1 = tf.linalg.diag(tf.math.reduce_sum(Adj, 1)) - Adj\n",
    "            \n",
    "#             Lk = Lk_1\n",
    "            \n",
    "#             global Laplacian\n",
    "#             Laplacian = Lk\n",
    "        \n",
    "#         Xk_1 = self.data_inpainting(psi, Y, Lk, AAT)\n",
    "        \n",
    "#         global learned_graph\n",
    "#         learned_graph.append(Lk.numpy())\n",
    "        \n",
    "#         return tf.reshape(Xk_1, [1, N, T])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c3936eb6-5365-4d45-9341-957e27695978",
   "metadata": {},
   "outputs": [],
   "source": [
    "class ProposedModel(tf.keras.Model):\n",
    "    \n",
    "    def __init__(self, L_init, reg_init, loops_init, d_init, p_init, alpha_init, beta_init, threshold_in, **kwargs):\n",
    "        super(ProposedModel, self).__init__(**kwargs)\n",
    "        \n",
    "        self.p1_init = tf.constant(p_init[0], shape = (1, 1), dtype = \"float32\")\n",
    "        self.p1 = tf.Variable(initial_value = self.p1_init, trainable = True, name = \"p1\")\n",
    "        \n",
    "        self.p2_init = tf.constant(p_init[1], shape = (1, 1), dtype = \"float32\")\n",
    "        self.p2 = tf.Variable(initial_value = self.p2_init, trainable = True, name = \"p2\")\n",
    "        \n",
    "        self.L_in = L_init\n",
    "        self.preg = reg_init\n",
    "        self.loops = loops_init\n",
    "        self.d_int = d_init\n",
    "        self.alp = alpha_init\n",
    "        self.bet = beta_init\n",
    "        self.threshold_init = threshold_in\n",
    "        \n",
    "    def data_inpainting(self, psi, Y, Lk, AAT):\n",
    "        loop_b, reg = self.loops[1], self.preg\n",
    "\n",
    "        Xk = tf.zeros_like(Y)\n",
    "        Zk = -(tf.multiply(psi, Xk) - Y + (2 * reg * (Lk @ Xk @ AAT)))\n",
    "        \n",
    "        for i in range(loop_b):\n",
    "            fdx_xk = tf.multiply(psi, Xk) - Y + (2 * reg * (Lk @ Xk @ AAT))\n",
    "            fdx_zk = tf.multiply(psi, Zk) - Y + (2 * reg * (Lk @ Zk @ AAT))\n",
    "            \n",
    "            tau = tf.linalg.trace(tf.transpose(fdx_xk) @ Zk) / tf.linalg.trace(tf.transpose((Y + fdx_zk)) @ Zk)\n",
    "            \n",
    "            Xk_1 = Xk - (tau * Zk)\n",
    "\n",
    "            fdx_xk_1 = tf.multiply(psi, Xk_1) - Y + (2 * reg * (Lk @ Xk_1 @ AAT))\n",
    "            gamma = (tf.norm(fdx_xk_1) ** 2) / (tf.norm(fdx_xk) ** 2)\n",
    "\n",
    "            Zk_1 = (gamma * Zk) - fdx_xk_1\n",
    "\n",
    "            Xk = Xk_1\n",
    "            Zk = Zk_1\n",
    "        \n",
    "        return Xk_1\n",
    "    \n",
    "    def graph_learning(self, X, Lk, AAT):\n",
    "        loop_c, alpha, beta = self.loops[2], self.alp, self.bet\n",
    "        \n",
    "        X_AAT_XT = tf.matmul(X, tf.matmul(AAT, tf.transpose(X)))\n",
    "#         print(AAT)\n",
    "#         print(X_AAT_XT)\n",
    "        \n",
    "        for i in range(loop_c):\n",
    "            fdL_Lk = coeffs[1] * X_AAT_XT + (beta * Lk)\n",
    "\n",
    "            ###### This is required\n",
    "            # fdx_Lk = tf.transpose(tf.transpose(fdL_Lk) - tf.reduce_mean(fdL_Lk, 1))\n",
    "            fdL_Lk = fdL_Lk - tf.reshape(tf.reduce_mean(fdL_Lk, 1), [N, 1])\n",
    "            fdL_Lk = (fdL_Lk + tf.transpose(fdL_Lk)) / 2\n",
    "            ######\n",
    "#             print(Lk, fdL_Lk)\n",
    "            Lk_1 = Lk - (alpha * fdL_Lk)\n",
    "            \n",
    "            ######\n",
    "            Adj_k1 = tf.multiply(Mul, Lk_1)\n",
    "            Adj_k1 = tf.nn.relu(Adj_k1)\n",
    "            Lk_1 = tf.linalg.diag(tf.math.reduce_sum(Adj_k1, 1)) - Adj_k1\n",
    "            ######\n",
    "            \n",
    "            Lk = Lk_1\n",
    "            \n",
    "        return Lk\n",
    "    \n",
    "    def call(self, y):\n",
    "\n",
    "        psi = y[0,:,T:]\n",
    "        global psi_cost\n",
    "        psi_cost = psi\n",
    "        \n",
    "        psi = tf.convert_to_tensor(psi, dtype = \"float32\")\n",
    "        \n",
    "        X_in = y[0,:,:T]\n",
    "        X_in = psi * tf.convert_to_tensor(X_in, dtype = \"float32\")\n",
    "        Y = X_in\n",
    "        \n",
    "        d = self.d_int\n",
    "        LT = tf.matmul(d, tf.transpose(d))\n",
    "        LT = tf.convert_to_tensor(LT, dtype = \"float32\")\n",
    "        \n",
    "        A_transform = tf.eye(T) + (self.p1 * MP(LT, 1)) + (self.p2 * MP(LT, 2))\n",
    "        AAT = A_transform\n",
    "        \n",
    "        global A_transform_cost\n",
    "        A_transform_cost = AAT\n",
    "        \n",
    "        loop_a = self.loops[0]\n",
    "        threshold = self.threshold_init\n",
    "        Lk = self.L_in\n",
    "        \n",
    "        for i in range(loop_a):\n",
    "            \n",
    "            Xk_1 = self.data_inpainting(psi, Y, Lk, AAT)\n",
    "            \n",
    "            Xk_1_gt = X_in + tf.multiply((tf.ones(psi.shape) - psi), Xk_1)\n",
    "            \n",
    "            Lk_1 = self.graph_learning(Xk_1_gt, Lk, AAT)\n",
    "            \n",
    "            Adj = tf.linalg.diag(tf.linalg.diag_part(Lk_1)) - Lk_1 # Gives adjacency\n",
    "            \n",
    "            n = tf.math.count_nonzero(Adj, dtype=\"float32\")\n",
    "            mean = tf.math.reduce_sum(Adj) / n\n",
    "            Adj = tf.math.subtract(Adj, (threshold * mean)) # Ensures the sparsity of learned graph\n",
    "            \n",
    "            Adj = tf.nn.relu(Adj)\n",
    "            # Adj = tf.math.sign(Adj)\n",
    "            \n",
    "            Lk_1 = tf.linalg.diag(tf.math.reduce_sum(Adj, 1)) - Adj\n",
    "            # print(Lk_1.numpy()[0,:])    \n",
    "            Lk = Lk_1\n",
    "        \n",
    "            global Laplacian\n",
    "            Laplacian = Lk\n",
    "        \n",
    "        Xk_1 = self.data_inpainting(psi, Y, Lk, AAT)\n",
    "        \n",
    "        global learned_graph\n",
    "        learned_graph.append(Lk.numpy())\n",
    "        \n",
    "        return tf.reshape(Xk_1, [1, N, T])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a093cddb",
   "metadata": {},
   "outputs": [],
   "source": [
    "Lap_init = initial_graph(X_train, N, 8)\n",
    "\n",
    "loop_a = 5\n",
    "loop_b = 15 # Data Inpainting\n",
    "loop_c = 10 # Graph Learning\n",
    "\n",
    "reg_init = 5.0e-5\n",
    "\n",
    "alpha_init = 1.0e2\n",
    "beta_init = 5.0e2\n",
    "\n",
    "threshold_init = 0.3\n",
    "\n",
    "no_of_psi = 1\n",
    "sensing_ratio = np.array([0.10])\n",
    "\n",
    "# SNR_list = [-20.0, -10.0, -5.0, 0.0, 5.0, 10.0, 15.0, 20.0, 30.0, 40.0]\n",
    "SNR_list = np.arange(0.0, 60.1, 5.0)\n",
    "\n",
    "p_init = [10.0, 10.0]\n",
    "lr_decay_factor = 1.04\n",
    "\n",
    "all_psi = []\n",
    "all_vars = []\n",
    "\n",
    "length = no_of_psi * N * T\n",
    "X_train_variance = np.var(X_train.flatten())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e32f2c20",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:At this time, the v2.11+ optimizer `tf.keras.optimizers.SGD` runs slowly on M1/M2 Macs, please use the legacy Keras optimizer instead, located at `tf.keras.optimizers.legacy.SGD`.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "################################### Sensing Ratio: 10.0% ###################################\n",
      "\n",
      "\n",
      "######################################################################\n",
      "############################ SNR: 0.0 dB ###########################\n",
      "######################################################################\n",
      "\n",
      "\n",
      "Epoch 1/20\n",
      "1/1 [==============================] - 1s 1s/step - loss: 61.0140 - mse_known: 0.2566 - mse_unknown: 0.6249 - lr: 0.0100\n",
      "Epoch 2/20\n",
      "1/1 [==============================] - 1s 866ms/step - loss: 60.1312 - mse_known: 0.2566 - mse_unknown: 0.6241 - lr: 0.0100\n",
      "Epoch 3/20\n",
      "1/1 [==============================] - 1s 824ms/step - loss: 59.2587 - mse_known: 0.2567 - mse_unknown: 0.5920 - lr: 0.0100\n",
      "Epoch 4/20\n",
      "1/1 [==============================] - 1s 867ms/step - loss: 58.4016 - mse_known: 0.2567 - mse_unknown: 0.5917 - lr: 0.0100\n",
      "Epoch 5/20\n",
      "1/1 [==============================] - 1s 837ms/step - loss: 57.5574 - mse_known: 0.2567 - mse_unknown: 0.5914 - lr: 0.0100\n",
      "Epoch 6/20\n",
      "1/1 [==============================] - 1s 838ms/step - loss: 56.7260 - mse_known: 0.2567 - mse_unknown: 0.5911 - lr: 0.0100\n",
      "Epoch 7/20\n",
      "1/1 [==============================] - 1s 831ms/step - loss: 55.9071 - mse_known: 0.2567 - mse_unknown: 0.5908 - lr: 0.0100\n",
      "Epoch 8/20\n",
      "1/1 [==============================] - 1s 835ms/step - loss: 55.1005 - mse_known: 0.2567 - mse_unknown: 0.5906 - lr: 0.0100\n",
      "Epoch 9/20\n",
      "1/1 [==============================] - 1s 852ms/step - loss: 54.3061 - mse_known: 0.2567 - mse_unknown: 0.5902 - lr: 0.0100\n",
      "Epoch 10/20\n",
      "1/1 [==============================] - 1s 846ms/step - loss: 53.5236 - mse_known: 0.2567 - mse_unknown: 0.5899 - lr: 0.0100\n",
      "Epoch 11/20\n",
      "1/1 [==============================] - 1s 850ms/step - loss: 52.7530 - mse_known: 0.2567 - mse_unknown: 0.5896 - lr: 0.0096\n",
      "Epoch 12/20\n",
      "1/1 [==============================] - 1s 851ms/step - loss: 52.0230 - mse_known: 0.2568 - mse_unknown: 0.5893 - lr: 0.0092\n",
      "Epoch 13/20\n",
      "1/1 [==============================] - 1s 967ms/step - loss: 51.3312 - mse_known: 0.2568 - mse_unknown: 0.5890 - lr: 0.0089\n",
      "Epoch 14/20\n",
      "1/1 [==============================] - 1s 891ms/step - loss: 50.6757 - mse_known: 0.2568 - mse_unknown: 0.5882 - lr: 0.0085\n",
      "Epoch 15/20\n",
      "1/1 [==============================] - 1s 838ms/step - loss: 50.0528 - mse_known: 0.2568 - mse_unknown: 0.5885 - lr: 0.0082\n",
      "Epoch 16/20\n",
      "1/1 [==============================] - 1s 840ms/step - loss: 49.4624 - mse_known: 0.2568 - mse_unknown: 0.5877 - lr: 0.0079\n",
      "Epoch 17/20\n",
      "1/1 [==============================] - 1s 846ms/step - loss: 48.9008 - mse_known: 0.2568 - mse_unknown: 0.5880 - lr: 0.0076\n",
      "Epoch 18/20\n",
      "1/1 [==============================] - 1s 832ms/step - loss: 48.3676 - mse_known: 0.2568 - mse_unknown: 0.5878 - lr: 0.0073\n",
      "Epoch 19/20\n",
      "1/1 [==============================] - 1s 923ms/step - loss: 47.8607 - mse_known: 0.2568 - mse_unknown: 0.5876 - lr: 0.0070\n",
      "Epoch 20/20\n",
      "1/1 [==============================] - 1s 845ms/step - loss: 47.3787 - mse_known: 0.2568 - mse_unknown: 0.5874 - lr: 0.0068\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:At this time, the v2.11+ optimizer `tf.keras.optimizers.SGD` runs slowly on M1/M2 Macs, please use the legacy Keras optimizer instead, located at `tf.keras.optimizers.legacy.SGD`.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Filter Coefficients: [9.555124, 8.463255]\n",
      "\n",
      "\n",
      "######################################################################\n",
      "############################ SNR: 5.0 dB ###########################\n",
      "######################################################################\n",
      "\n",
      "\n",
      "Epoch 1/20\n",
      "1/1 [==============================] - 1s 826ms/step - loss: 59.3907 - mse_known: 0.0798 - mse_unknown: 0.2735 - lr: 0.0100\n",
      "Epoch 2/20\n",
      "1/1 [==============================] - 1s 847ms/step - loss: 58.5088 - mse_known: 0.0798 - mse_unknown: 0.2734 - lr: 0.0100\n",
      "Epoch 3/20\n",
      "1/1 [==============================] - 1s 832ms/step - loss: 57.6392 - mse_known: 0.0798 - mse_unknown: 0.2733 - lr: 0.0100\n",
      "Epoch 4/20\n",
      "1/1 [==============================] - 1s 922ms/step - loss: 56.7828 - mse_known: 0.0798 - mse_unknown: 0.2732 - lr: 0.0100\n",
      "Epoch 5/20\n",
      "1/1 [==============================] - 1s 875ms/step - loss: 55.9393 - mse_known: 0.0798 - mse_unknown: 0.2731 - lr: 0.0100\n",
      "Epoch 6/20\n",
      "1/1 [==============================] - 1s 964ms/step - loss: 55.1085 - mse_known: 0.0798 - mse_unknown: 0.2730 - lr: 0.0100\n",
      "Epoch 7/20\n",
      "1/1 [==============================] - 1s 835ms/step - loss: 54.2902 - mse_known: 0.0798 - mse_unknown: 0.2729 - lr: 0.0100\n",
      "Epoch 8/20\n",
      "1/1 [==============================] - 1s 838ms/step - loss: 53.4842 - mse_known: 0.0798 - mse_unknown: 0.2728 - lr: 0.0100\n",
      "Epoch 9/20\n",
      "1/1 [==============================] - 1s 823ms/step - loss: 52.6904 - mse_known: 0.0798 - mse_unknown: 0.2723 - lr: 0.0100\n",
      "Epoch 10/20\n",
      "1/1 [==============================] - 1s 841ms/step - loss: 51.9085 - mse_known: 0.0798 - mse_unknown: 0.2725 - lr: 0.0100\n",
      "Epoch 11/20\n",
      "1/1 [==============================] - 1s 833ms/step - loss: 51.1384 - mse_known: 0.0798 - mse_unknown: 0.2724 - lr: 0.0096\n",
      "Epoch 12/20\n",
      "1/1 [==============================] - 1s 826ms/step - loss: 50.4090 - mse_known: 0.0798 - mse_unknown: 0.2723 - lr: 0.0092\n",
      "Epoch 13/20\n",
      "1/1 [==============================] - 1s 879ms/step - loss: 49.7177 - mse_known: 0.0798 - mse_unknown: 0.2722 - lr: 0.0089\n",
      "Epoch 14/20\n",
      "1/1 [==============================] - 1s 835ms/step - loss: 49.0621 - mse_known: 0.0798 - mse_unknown: 0.2721 - lr: 0.0085\n",
      "Epoch 15/20\n",
      "1/1 [==============================] - 1s 833ms/step - loss: 48.4402 - mse_known: 0.0798 - mse_unknown: 0.2720 - lr: 0.0082\n",
      "Epoch 16/20\n",
      "1/1 [==============================] - 1s 886ms/step - loss: 47.8497 - mse_known: 0.0798 - mse_unknown: 0.2719 - lr: 0.0079\n",
      "Epoch 17/20\n",
      "1/1 [==============================] - 1s 829ms/step - loss: 47.2890 - mse_known: 0.0798 - mse_unknown: 0.2718 - lr: 0.0076\n",
      "Epoch 18/20\n",
      "1/1 [==============================] - 1s 832ms/step - loss: 46.7562 - mse_known: 0.0798 - mse_unknown: 0.2717 - lr: 0.0073\n",
      "Epoch 19/20\n",
      "1/1 [==============================] - 1s 871ms/step - loss: 46.2497 - mse_known: 0.0798 - mse_unknown: 0.2717 - lr: 0.0070\n",
      "Epoch 20/20\n",
      "1/1 [==============================] - 1s 825ms/step - loss: 45.7680 - mse_known: 0.0798 - mse_unknown: 0.2716 - lr: 0.0068\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:At this time, the v2.11+ optimizer `tf.keras.optimizers.SGD` runs slowly on M1/M2 Macs, please use the legacy Keras optimizer instead, located at `tf.keras.optimizers.legacy.SGD`.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Filter Coefficients: [9.555291, 8.463836]\n",
      "\n",
      "\n",
      "######################################################################\n",
      "############################ SNR: 10.0 dB ###########################\n",
      "######################################################################\n",
      "\n",
      "\n",
      "Epoch 1/20\n",
      "1/1 [==============================] - 1s 870ms/step - loss: 58.8889 - mse_known: 0.0247 - mse_unknown: 0.1350 - lr: 0.0100\n",
      "Epoch 2/20\n",
      "1/1 [==============================] - 1s 865ms/step - loss: 58.0071 - mse_known: 0.0247 - mse_unknown: 0.1349 - lr: 0.0100\n",
      "Epoch 3/20\n",
      "1/1 [==============================] - 1s 832ms/step - loss: 57.1377 - mse_known: 0.0247 - mse_unknown: 0.1349 - lr: 0.0100\n",
      "Epoch 4/20\n",
      "1/1 [==============================] - 1s 849ms/step - loss: 56.2814 - mse_known: 0.0247 - mse_unknown: 0.1348 - lr: 0.0100\n",
      "Epoch 5/20\n",
      "1/1 [==============================] - 1s 853ms/step - loss: 55.4380 - mse_known: 0.0247 - mse_unknown: 0.1348 - lr: 0.0100\n",
      "Epoch 6/20\n",
      "1/1 [==============================] - 1s 848ms/step - loss: 54.6073 - mse_known: 0.0247 - mse_unknown: 0.1347 - lr: 0.0100\n",
      "Epoch 7/20\n",
      "1/1 [==============================] - 1s 804ms/step - loss: 53.7891 - mse_known: 0.0247 - mse_unknown: 0.1347 - lr: 0.0100\n",
      "Epoch 8/20\n",
      "1/1 [==============================] - 1s 896ms/step - loss: 52.9833 - mse_known: 0.0247 - mse_unknown: 0.1346 - lr: 0.0100\n",
      "Epoch 9/20\n",
      "1/1 [==============================] - 1s 869ms/step - loss: 52.1896 - mse_known: 0.0247 - mse_unknown: 0.1344 - lr: 0.0100\n",
      "Epoch 10/20\n",
      "1/1 [==============================] - 1s 836ms/step - loss: 51.4079 - mse_known: 0.0247 - mse_unknown: 0.1344 - lr: 0.0100\n",
      "Epoch 11/20\n",
      "1/1 [==============================] - 1s 837ms/step - loss: 50.6379 - mse_known: 0.0247 - mse_unknown: 0.1345 - lr: 0.0096\n",
      "Epoch 12/20\n",
      "1/1 [==============================] - 1s 933ms/step - loss: 49.9086 - mse_known: 0.0247 - mse_unknown: 0.1345 - lr: 0.0092\n",
      "Epoch 13/20\n",
      "1/1 [==============================] - 1s 846ms/step - loss: 49.2174 - mse_known: 0.0247 - mse_unknown: 0.1343 - lr: 0.0089\n",
      "Epoch 14/20\n",
      "1/1 [==============================] - 1s 844ms/step - loss: 48.5619 - mse_known: 0.0247 - mse_unknown: 0.1343 - lr: 0.0085\n",
      "Epoch 15/20\n",
      "1/1 [==============================] - 1s 886ms/step - loss: 47.9400 - mse_known: 0.0247 - mse_unknown: 0.1342 - lr: 0.0082\n",
      "Epoch 16/20\n",
      "1/1 [==============================] - 1s 836ms/step - loss: 47.3497 - mse_known: 0.0247 - mse_unknown: 0.1341 - lr: 0.0079\n",
      "Epoch 17/20\n",
      "1/1 [==============================] - 1s 824ms/step - loss: 46.7890 - mse_known: 0.0247 - mse_unknown: 0.1341 - lr: 0.0076\n",
      "Epoch 18/20\n",
      "1/1 [==============================] - 1s 857ms/step - loss: 46.2563 - mse_known: 0.0247 - mse_unknown: 0.1341 - lr: 0.0073\n",
      "Epoch 19/20\n",
      "1/1 [==============================] - 1s 828ms/step - loss: 45.7499 - mse_known: 0.0247 - mse_unknown: 0.1340 - lr: 0.0070\n",
      "Epoch 20/20\n",
      "1/1 [==============================] - 1s 809ms/step - loss: 45.2683 - mse_known: 0.0247 - mse_unknown: 0.1340 - lr: 0.0068\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:At this time, the v2.11+ optimizer `tf.keras.optimizers.SGD` runs slowly on M1/M2 Macs, please use the legacy Keras optimizer instead, located at `tf.keras.optimizers.legacy.SGD`.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Filter Coefficients: [9.555325, 8.463954]\n",
      "\n",
      "\n",
      "######################################################################\n",
      "############################ SNR: 15.0 dB ###########################\n",
      "######################################################################\n",
      "\n",
      "\n",
      "Epoch 1/20\n",
      "1/1 [==============================] - 1s 839ms/step - loss: 58.7388 - mse_known: 0.0082 - mse_unknown: 0.1165 - lr: 0.0100\n",
      "Epoch 2/20\n",
      "1/1 [==============================] - 1s 854ms/step - loss: 57.8570 - mse_known: 0.0082 - mse_unknown: 0.1165 - lr: 0.0100\n",
      "Epoch 3/20\n",
      "1/1 [==============================] - 1s 835ms/step - loss: 56.9876 - mse_known: 0.0082 - mse_unknown: 0.1165 - lr: 0.0100\n",
      "Epoch 4/20\n",
      "1/1 [==============================] - 1s 856ms/step - loss: 56.1314 - mse_known: 0.0082 - mse_unknown: 0.1165 - lr: 0.0100\n",
      "Epoch 5/20\n",
      "1/1 [==============================] - 1s 909ms/step - loss: 55.2880 - mse_known: 0.0082 - mse_unknown: 0.1165 - lr: 0.0100\n",
      "Epoch 6/20\n",
      "1/1 [==============================] - 1s 808ms/step - loss: 54.4574 - mse_known: 0.0082 - mse_unknown: 0.1165 - lr: 0.0100\n",
      "Epoch 7/20\n",
      "1/1 [==============================] - 1s 850ms/step - loss: 53.6392 - mse_known: 0.0082 - mse_unknown: 0.1164 - lr: 0.0100\n",
      "Epoch 8/20\n",
      "1/1 [==============================] - 1s 810ms/step - loss: 52.8334 - mse_known: 0.0082 - mse_unknown: 0.1164 - lr: 0.0100\n",
      "Epoch 9/20\n",
      "1/1 [==============================] - 1s 819ms/step - loss: 52.0397 - mse_known: 0.0082 - mse_unknown: 0.1163 - lr: 0.0100\n",
      "Epoch 10/20\n",
      "1/1 [==============================] - 1s 833ms/step - loss: 51.2580 - mse_known: 0.0082 - mse_unknown: 0.1163 - lr: 0.0100\n",
      "Epoch 11/20\n",
      "1/1 [==============================] - 1s 838ms/step - loss: 50.4881 - mse_known: 0.0082 - mse_unknown: 0.1163 - lr: 0.0096\n",
      "Epoch 12/20\n",
      "1/1 [==============================] - 1s 841ms/step - loss: 49.7588 - mse_known: 0.0082 - mse_unknown: 0.1163 - lr: 0.0092\n",
      "Epoch 13/20\n",
      "1/1 [==============================] - 1s 855ms/step - loss: 49.0675 - mse_known: 0.0082 - mse_unknown: 0.1163 - lr: 0.0089\n",
      "Epoch 14/20\n",
      "1/1 [==============================] - 1s 815ms/step - loss: 48.4121 - mse_known: 0.0082 - mse_unknown: 0.1162 - lr: 0.0085\n",
      "Epoch 15/20\n",
      "1/1 [==============================] - 1s 835ms/step - loss: 47.7903 - mse_known: 0.0082 - mse_unknown: 0.1162 - lr: 0.0082\n",
      "Epoch 16/20\n",
      "1/1 [==============================] - 1s 828ms/step - loss: 47.2000 - mse_known: 0.0082 - mse_unknown: 0.1162 - lr: 0.0079\n",
      "Epoch 17/20\n",
      "1/1 [==============================] - 1s 895ms/step - loss: 46.6393 - mse_known: 0.0082 - mse_unknown: 0.1162 - lr: 0.0076\n",
      "Epoch 18/20\n",
      "1/1 [==============================] - 1s 834ms/step - loss: 46.1066 - mse_known: 0.0082 - mse_unknown: 0.1162 - lr: 0.0073\n",
      "Epoch 19/20\n",
      "1/1 [==============================] - 1s 845ms/step - loss: 45.6002 - mse_known: 0.0082 - mse_unknown: 0.1162 - lr: 0.0070\n",
      "Epoch 20/20\n",
      "1/1 [==============================] - 1s 841ms/step - loss: 45.1186 - mse_known: 0.0082 - mse_unknown: 0.1162 - lr: 0.0068\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:At this time, the v2.11+ optimizer `tf.keras.optimizers.SGD` runs slowly on M1/M2 Macs, please use the legacy Keras optimizer instead, located at `tf.keras.optimizers.legacy.SGD`.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Filter Coefficients: [9.555336, 8.463973]\n",
      "\n",
      "\n",
      "######################################################################\n",
      "############################ SNR: 20.0 dB ###########################\n",
      "######################################################################\n",
      "\n",
      "\n",
      "Epoch 1/20\n",
      "1/1 [==============================] - 1s 845ms/step - loss: 58.6873 - mse_known: 0.0025 - mse_unknown: 0.0972 - lr: 0.0100\n",
      "Epoch 2/20\n",
      "1/1 [==============================] - 1s 844ms/step - loss: 57.8055 - mse_known: 0.0025 - mse_unknown: 0.0973 - lr: 0.0100\n",
      "Epoch 3/20\n",
      "1/1 [==============================] - 1s 846ms/step - loss: 56.9362 - mse_known: 0.0025 - mse_unknown: 0.0973 - lr: 0.0100\n",
      "Epoch 4/20\n",
      "1/1 [==============================] - 1s 942ms/step - loss: 56.0799 - mse_known: 0.0025 - mse_unknown: 0.0973 - lr: 0.0100\n",
      "Epoch 5/20\n",
      "1/1 [==============================] - 1s 858ms/step - loss: 55.2365 - mse_known: 0.0025 - mse_unknown: 0.0973 - lr: 0.0100\n",
      "Epoch 6/20\n",
      "1/1 [==============================] - 1s 839ms/step - loss: 54.4059 - mse_known: 0.0025 - mse_unknown: 0.0973 - lr: 0.0100\n",
      "Epoch 7/20\n",
      "1/1 [==============================] - 1s 827ms/step - loss: 53.5877 - mse_known: 0.0025 - mse_unknown: 0.0973 - lr: 0.0100\n",
      "Epoch 8/20\n",
      "1/1 [==============================] - 1s 832ms/step - loss: 52.7819 - mse_known: 0.0025 - mse_unknown: 0.0973 - lr: 0.0100\n",
      "Epoch 9/20\n",
      "1/1 [==============================] - 1s 826ms/step - loss: 51.9883 - mse_known: 0.0025 - mse_unknown: 0.0973 - lr: 0.0100\n",
      "Epoch 10/20\n",
      "1/1 [==============================] - 1s 834ms/step - loss: 51.2066 - mse_known: 0.0025 - mse_unknown: 0.0974 - lr: 0.0100\n",
      "Epoch 11/20\n",
      "1/1 [==============================] - 1s 935ms/step - loss: 50.4366 - mse_known: 0.0025 - mse_unknown: 0.0974 - lr: 0.0096\n",
      "Epoch 12/20\n",
      "1/1 [==============================] - 1s 832ms/step - loss: 49.7073 - mse_known: 0.0025 - mse_unknown: 0.0974 - lr: 0.0092\n",
      "Epoch 13/20\n",
      "1/1 [==============================] - 1s 817ms/step - loss: 49.0161 - mse_known: 0.0025 - mse_unknown: 0.0974 - lr: 0.0089\n",
      "Epoch 14/20\n",
      "1/1 [==============================] - 1s 827ms/step - loss: 48.3607 - mse_known: 0.0025 - mse_unknown: 0.0974 - lr: 0.0085\n",
      "Epoch 15/20\n",
      "1/1 [==============================] - 1s 812ms/step - loss: 47.7388 - mse_known: 0.0025 - mse_unknown: 0.0974 - lr: 0.0082\n",
      "Epoch 16/20\n",
      "1/1 [==============================] - 1s 892ms/step - loss: 47.1485 - mse_known: 0.0025 - mse_unknown: 0.0974 - lr: 0.0079\n",
      "Epoch 17/20\n",
      "1/1 [==============================] - 1s 834ms/step - loss: 46.5879 - mse_known: 0.0025 - mse_unknown: 0.0974 - lr: 0.0076\n",
      "Epoch 18/20\n",
      "1/1 [==============================] - 1s 888ms/step - loss: 46.0552 - mse_known: 0.0025 - mse_unknown: 0.0974 - lr: 0.0073\n",
      "Epoch 19/20\n",
      "1/1 [==============================] - 1s 856ms/step - loss: 45.5488 - mse_known: 0.0025 - mse_unknown: 0.0975 - lr: 0.0070\n",
      "Epoch 20/20\n",
      "1/1 [==============================] - 1s 813ms/step - loss: 45.0672 - mse_known: 0.0025 - mse_unknown: 0.0975 - lr: 0.0068\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:At this time, the v2.11+ optimizer `tf.keras.optimizers.SGD` runs slowly on M1/M2 Macs, please use the legacy Keras optimizer instead, located at `tf.keras.optimizers.legacy.SGD`.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Filter Coefficients: [9.555338, 8.463981]\n",
      "\n",
      "\n",
      "######################################################################\n",
      "############################ SNR: 25.0 dB ###########################\n",
      "######################################################################\n",
      "\n",
      "\n",
      "Epoch 1/20\n",
      "1/1 [==============================] - 1s 869ms/step - loss: 58.6719 - mse_known: 7.7704e-04 - mse_unknown: 0.0992 - lr: 0.0100\n",
      "Epoch 2/20\n",
      "1/1 [==============================] - 1s 896ms/step - loss: 57.7901 - mse_known: 7.7705e-04 - mse_unknown: 0.0992 - lr: 0.0100\n",
      "Epoch 3/20\n",
      "1/1 [==============================] - 1s 928ms/step - loss: 56.9208 - mse_known: 7.7706e-04 - mse_unknown: 0.0992 - lr: 0.0100\n",
      "Epoch 4/20\n",
      "1/1 [==============================] - 1s 805ms/step - loss: 56.0645 - mse_known: 7.7707e-04 - mse_unknown: 0.0991 - lr: 0.0100\n",
      "Epoch 5/20\n",
      "1/1 [==============================] - 1s 848ms/step - loss: 55.2212 - mse_known: 7.7708e-04 - mse_unknown: 0.0992 - lr: 0.0100\n",
      "Epoch 6/20\n",
      "1/1 [==============================] - 1s 841ms/step - loss: 54.3905 - mse_known: 7.7709e-04 - mse_unknown: 0.0992 - lr: 0.0100\n",
      "Epoch 7/20\n",
      "1/1 [==============================] - 1s 816ms/step - loss: 53.5724 - mse_known: 7.7710e-04 - mse_unknown: 0.0992 - lr: 0.0100\n",
      "Epoch 8/20\n",
      "1/1 [==============================] - 1s 868ms/step - loss: 52.7666 - mse_known: 7.7711e-04 - mse_unknown: 0.0991 - lr: 0.0100\n",
      "Epoch 9/20\n",
      "1/1 [==============================] - 1s 853ms/step - loss: 51.9729 - mse_known: 7.7711e-04 - mse_unknown: 0.0991 - lr: 0.0100\n",
      "Epoch 10/20\n",
      "1/1 [==============================] - 1s 845ms/step - loss: 51.1912 - mse_known: 7.7713e-04 - mse_unknown: 0.0991 - lr: 0.0100\n",
      "Epoch 11/20\n",
      "1/1 [==============================] - 1s 892ms/step - loss: 50.4213 - mse_known: 7.7713e-04 - mse_unknown: 0.0991 - lr: 0.0096\n",
      "Epoch 12/20\n",
      "1/1 [==============================] - 1s 859ms/step - loss: 49.6920 - mse_known: 7.7715e-04 - mse_unknown: 0.0990 - lr: 0.0092\n",
      "Epoch 13/20\n",
      "1/1 [==============================] - 1s 849ms/step - loss: 49.0008 - mse_known: 7.7716e-04 - mse_unknown: 0.0990 - lr: 0.0089\n",
      "Epoch 14/20\n",
      "1/1 [==============================] - 1s 829ms/step - loss: 48.3454 - mse_known: 7.7716e-04 - mse_unknown: 0.0990 - lr: 0.0085\n",
      "Epoch 15/20\n",
      "1/1 [==============================] - 1s 826ms/step - loss: 47.7235 - mse_known: 7.7717e-04 - mse_unknown: 0.0990 - lr: 0.0082\n",
      "Epoch 16/20\n",
      "1/1 [==============================] - 1s 847ms/step - loss: 47.1332 - mse_known: 7.7719e-04 - mse_unknown: 0.0990 - lr: 0.0079\n",
      "Epoch 17/20\n",
      "1/1 [==============================] - 1s 952ms/step - loss: 46.5726 - mse_known: 7.7718e-04 - mse_unknown: 0.0990 - lr: 0.0076\n",
      "Epoch 18/20\n",
      "1/1 [==============================] - 1s 869ms/step - loss: 46.0399 - mse_known: 7.7720e-04 - mse_unknown: 0.0990 - lr: 0.0073\n",
      "Epoch 19/20\n",
      "1/1 [==============================] - 1s 962ms/step - loss: 45.5335 - mse_known: 7.7720e-04 - mse_unknown: 0.0990 - lr: 0.0070\n",
      "Epoch 20/20\n",
      "1/1 [==============================] - 1s 874ms/step - loss: 45.0518 - mse_known: 7.7721e-04 - mse_unknown: 0.0990 - lr: 0.0068\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:At this time, the v2.11+ optimizer `tf.keras.optimizers.SGD` runs slowly on M1/M2 Macs, please use the legacy Keras optimizer instead, located at `tf.keras.optimizers.legacy.SGD`.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Filter Coefficients: [9.555338, 8.463983]\n",
      "\n",
      "\n",
      "######################################################################\n",
      "############################ SNR: 30.0 dB ###########################\n",
      "######################################################################\n",
      "\n",
      "\n",
      "Epoch 1/20\n",
      "1/1 [==============================] - 1s 878ms/step - loss: 58.6672 - mse_known: 2.5470e-04 - mse_unknown: 0.0992 - lr: 0.0100\n",
      "Epoch 2/20\n",
      "1/1 [==============================] - 1s 856ms/step - loss: 57.7854 - mse_known: 2.5470e-04 - mse_unknown: 0.0992 - lr: 0.0100\n",
      "Epoch 3/20\n",
      "1/1 [==============================] - 1s 895ms/step - loss: 56.9161 - mse_known: 2.5470e-04 - mse_unknown: 0.0991 - lr: 0.0100\n",
      "Epoch 4/20\n",
      "1/1 [==============================] - 1s 903ms/step - loss: 56.0598 - mse_known: 2.5470e-04 - mse_unknown: 0.0991 - lr: 0.0100\n",
      "Epoch 5/20\n",
      "1/1 [==============================] - 1s 823ms/step - loss: 55.2165 - mse_known: 2.5470e-04 - mse_unknown: 0.0991 - lr: 0.0100\n",
      "Epoch 6/20\n",
      "1/1 [==============================] - 1s 863ms/step - loss: 54.3858 - mse_known: 2.5470e-04 - mse_unknown: 0.0991 - lr: 0.0100\n",
      "Epoch 7/20\n",
      "1/1 [==============================] - 1s 840ms/step - loss: 53.5677 - mse_known: 2.5470e-04 - mse_unknown: 0.0990 - lr: 0.0100\n",
      "Epoch 8/20\n",
      "1/1 [==============================] - 1s 848ms/step - loss: 52.7619 - mse_known: 2.5470e-04 - mse_unknown: 0.0990 - lr: 0.0100\n",
      "Epoch 9/20\n",
      "1/1 [==============================] - 1s 849ms/step - loss: 51.9683 - mse_known: 2.5471e-04 - mse_unknown: 0.0982 - lr: 0.0100\n",
      "Epoch 10/20\n",
      "1/1 [==============================] - 1s 930ms/step - loss: 51.1866 - mse_known: 2.5470e-04 - mse_unknown: 0.0982 - lr: 0.0100\n",
      "Epoch 11/20\n",
      "1/1 [==============================] - 1s 808ms/step - loss: 50.4166 - mse_known: 2.5470e-04 - mse_unknown: 0.0981 - lr: 0.0096\n",
      "Epoch 12/20\n",
      "1/1 [==============================] - 1s 814ms/step - loss: 49.6873 - mse_known: 2.5471e-04 - mse_unknown: 0.0981 - lr: 0.0092\n",
      "Epoch 13/20\n",
      "1/1 [==============================] - 1s 808ms/step - loss: 48.9961 - mse_known: 2.5471e-04 - mse_unknown: 0.0980 - lr: 0.0089\n",
      "Epoch 14/20\n",
      "1/1 [==============================] - 1s 833ms/step - loss: 48.3407 - mse_known: 2.5471e-04 - mse_unknown: 0.0980 - lr: 0.0085\n",
      "Epoch 15/20\n",
      "1/1 [==============================] - 1s 827ms/step - loss: 47.7188 - mse_known: 2.5471e-04 - mse_unknown: 0.0980 - lr: 0.0082\n",
      "Epoch 16/20\n",
      "1/1 [==============================] - 1s 810ms/step - loss: 47.1285 - mse_known: 2.5471e-04 - mse_unknown: 0.0980 - lr: 0.0079\n",
      "Epoch 17/20\n",
      "1/1 [==============================] - 1s 826ms/step - loss: 46.5679 - mse_known: 2.5471e-04 - mse_unknown: 0.0979 - lr: 0.0076\n",
      "Epoch 18/20\n",
      "1/1 [==============================] - 1s 847ms/step - loss: 46.0352 - mse_known: 2.5471e-04 - mse_unknown: 0.0979 - lr: 0.0073\n",
      "Epoch 19/20\n",
      "1/1 [==============================] - 1s 844ms/step - loss: 45.5288 - mse_known: 2.5471e-04 - mse_unknown: 0.0979 - lr: 0.0070\n",
      "Epoch 20/20\n",
      "1/1 [==============================] - 1s 831ms/step - loss: 45.0472 - mse_known: 2.5472e-04 - mse_unknown: 0.0979 - lr: 0.0068\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:At this time, the v2.11+ optimizer `tf.keras.optimizers.SGD` runs slowly on M1/M2 Macs, please use the legacy Keras optimizer instead, located at `tf.keras.optimizers.legacy.SGD`.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Filter Coefficients: [9.555338, 8.463983]\n",
      "\n",
      "\n",
      "######################################################################\n",
      "############################ SNR: 35.0 dB ###########################\n",
      "######################################################################\n",
      "\n",
      "\n",
      "Epoch 1/20\n",
      "1/1 [==============================] - 1s 857ms/step - loss: 58.6656 - mse_known: 7.8128e-05 - mse_unknown: 0.0981 - lr: 0.0100\n",
      "Epoch 2/20\n",
      "1/1 [==============================] - 1s 867ms/step - loss: 57.7838 - mse_known: 7.8127e-05 - mse_unknown: 0.0978 - lr: 0.0100\n",
      "Epoch 3/20\n",
      "1/1 [==============================] - 1s 839ms/step - loss: 56.9145 - mse_known: 7.8128e-05 - mse_unknown: 0.0978 - lr: 0.0100\n",
      "Epoch 4/20\n",
      "1/1 [==============================] - 1s 826ms/step - loss: 56.0582 - mse_known: 7.8129e-05 - mse_unknown: 0.0980 - lr: 0.0100\n",
      "Epoch 5/20\n",
      "1/1 [==============================] - 1s 831ms/step - loss: 55.2149 - mse_known: 7.8129e-05 - mse_unknown: 0.0977 - lr: 0.0100\n",
      "Epoch 6/20\n",
      "1/1 [==============================] - 1s 810ms/step - loss: 54.3842 - mse_known: 7.8130e-05 - mse_unknown: 0.0979 - lr: 0.0100\n",
      "Epoch 7/20\n",
      "1/1 [==============================] - 1s 823ms/step - loss: 53.5661 - mse_known: 7.8130e-05 - mse_unknown: 0.0979 - lr: 0.0100\n",
      "Epoch 8/20\n",
      "1/1 [==============================] - 1s 843ms/step - loss: 52.7603 - mse_known: 7.8130e-05 - mse_unknown: 0.0979 - lr: 0.0100\n",
      "Epoch 9/20\n",
      "1/1 [==============================] - 1s 839ms/step - loss: 51.9666 - mse_known: 7.8132e-05 - mse_unknown: 0.0979 - lr: 0.0100\n",
      "Epoch 10/20\n",
      "1/1 [==============================] - 1s 819ms/step - loss: 51.1849 - mse_known: 7.8132e-05 - mse_unknown: 0.0979 - lr: 0.0100\n",
      "Epoch 11/20\n",
      "1/1 [==============================] - 1s 851ms/step - loss: 50.4149 - mse_known: 7.8133e-05 - mse_unknown: 0.0981 - lr: 0.0096\n",
      "Epoch 12/20\n",
      "1/1 [==============================] - 1s 832ms/step - loss: 49.6856 - mse_known: 7.8133e-05 - mse_unknown: 0.0981 - lr: 0.0092\n",
      "Epoch 13/20\n",
      "1/1 [==============================] - 1s 826ms/step - loss: 48.9945 - mse_known: 7.8134e-05 - mse_unknown: 0.0981 - lr: 0.0089\n",
      "Epoch 14/20\n",
      "1/1 [==============================] - 1s 811ms/step - loss: 48.3390 - mse_known: 7.8136e-05 - mse_unknown: 0.0981 - lr: 0.0085\n",
      "Epoch 15/20\n",
      "1/1 [==============================] - 1s 824ms/step - loss: 47.7172 - mse_known: 7.8133e-05 - mse_unknown: 0.0981 - lr: 0.0082\n",
      "Epoch 16/20\n",
      "1/1 [==============================] - 1s 896ms/step - loss: 47.1269 - mse_known: 7.8136e-05 - mse_unknown: 0.0980 - lr: 0.0079\n",
      "Epoch 17/20\n",
      "1/1 [==============================] - 1s 848ms/step - loss: 46.5662 - mse_known: 7.8136e-05 - mse_unknown: 0.0980 - lr: 0.0076\n",
      "Epoch 18/20\n",
      "1/1 [==============================] - 1s 843ms/step - loss: 46.0335 - mse_known: 7.8136e-05 - mse_unknown: 0.0980 - lr: 0.0073\n",
      "Epoch 19/20\n",
      "1/1 [==============================] - 1s 825ms/step - loss: 45.5271 - mse_known: 7.8134e-05 - mse_unknown: 0.0980 - lr: 0.0070\n",
      "Epoch 20/20\n",
      "1/1 [==============================] - 1s 835ms/step - loss: 45.0455 - mse_known: 7.8136e-05 - mse_unknown: 0.0980 - lr: 0.0068\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:At this time, the v2.11+ optimizer `tf.keras.optimizers.SGD` runs slowly on M1/M2 Macs, please use the legacy Keras optimizer instead, located at `tf.keras.optimizers.legacy.SGD`.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Filter Coefficients: [9.555339, 8.4639845]\n",
      "\n",
      "\n",
      "######################################################################\n",
      "############################ SNR: 40.0 dB ###########################\n",
      "######################################################################\n",
      "\n",
      "\n",
      "Epoch 1/20\n",
      "1/1 [==============================] - 1s 822ms/step - loss: 58.6651 - mse_known: 2.5515e-05 - mse_unknown: 0.0983 - lr: 0.0100\n",
      "Epoch 2/20\n",
      "1/1 [==============================] - 1s 811ms/step - loss: 57.7833 - mse_known: 2.5514e-05 - mse_unknown: 0.0984 - lr: 0.0100\n",
      "Epoch 3/20\n",
      "1/1 [==============================] - 1s 821ms/step - loss: 56.9140 - mse_known: 2.5514e-05 - mse_unknown: 0.0984 - lr: 0.0100\n",
      "Epoch 4/20\n",
      "1/1 [==============================] - 1s 807ms/step - loss: 56.0577 - mse_known: 2.5512e-05 - mse_unknown: 0.0984 - lr: 0.0100\n",
      "Epoch 5/20\n",
      "1/1 [==============================] - 1s 818ms/step - loss: 55.2144 - mse_known: 2.5511e-05 - mse_unknown: 0.0983 - lr: 0.0100\n",
      "Epoch 6/20\n",
      "1/1 [==============================] - 1s 815ms/step - loss: 54.3837 - mse_known: 2.5509e-05 - mse_unknown: 0.0983 - lr: 0.0100\n",
      "Epoch 7/20\n",
      "1/1 [==============================] - 1s 819ms/step - loss: 53.5656 - mse_known: 2.5508e-05 - mse_unknown: 0.0983 - lr: 0.0100\n",
      "Epoch 8/20\n",
      "1/1 [==============================] - 1s 824ms/step - loss: 52.7598 - mse_known: 2.5507e-05 - mse_unknown: 0.0983 - lr: 0.0100\n",
      "Epoch 9/20\n",
      "1/1 [==============================] - 1s 884ms/step - loss: 51.9661 - mse_known: 2.5506e-05 - mse_unknown: 0.0982 - lr: 0.0100\n",
      "Epoch 10/20\n",
      "1/1 [==============================] - 1s 825ms/step - loss: 51.1844 - mse_known: 2.5504e-05 - mse_unknown: 0.0982 - lr: 0.0100\n",
      "Epoch 11/20\n",
      "1/1 [==============================] - 1s 826ms/step - loss: 50.4145 - mse_known: 2.5503e-05 - mse_unknown: 0.0982 - lr: 0.0096\n",
      "Epoch 12/20\n",
      "1/1 [==============================] - 1s 820ms/step - loss: 49.6852 - mse_known: 2.5503e-05 - mse_unknown: 0.0982 - lr: 0.0092\n",
      "Epoch 13/20\n",
      "1/1 [==============================] - 1s 826ms/step - loss: 48.9940 - mse_known: 2.5501e-05 - mse_unknown: 0.0982 - lr: 0.0089\n",
      "Epoch 14/20\n",
      "1/1 [==============================] - 1s 827ms/step - loss: 48.3386 - mse_known: 2.5501e-05 - mse_unknown: 0.0981 - lr: 0.0085\n",
      "Epoch 15/20\n",
      "1/1 [==============================] - 1s 825ms/step - loss: 47.7167 - mse_known: 2.5499e-05 - mse_unknown: 0.0981 - lr: 0.0082\n",
      "Epoch 16/20\n",
      "1/1 [==============================] - 1s 822ms/step - loss: 47.1264 - mse_known: 2.5500e-05 - mse_unknown: 0.0981 - lr: 0.0079\n",
      "Epoch 17/20\n",
      "1/1 [==============================] - 1s 841ms/step - loss: 46.5658 - mse_known: 2.5498e-05 - mse_unknown: 0.0981 - lr: 0.0076\n",
      "Epoch 18/20\n",
      "1/1 [==============================] - 1s 835ms/step - loss: 46.0331 - mse_known: 2.5498e-05 - mse_unknown: 0.0981 - lr: 0.0073\n",
      "Epoch 19/20\n",
      "1/1 [==============================] - 1s 816ms/step - loss: 45.5267 - mse_known: 2.5495e-05 - mse_unknown: 0.0979 - lr: 0.0070\n",
      "Epoch 20/20\n",
      "1/1 [==============================] - 1s 814ms/step - loss: 45.0451 - mse_known: 2.5495e-05 - mse_unknown: 0.0979 - lr: 0.0068\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:At this time, the v2.11+ optimizer `tf.keras.optimizers.SGD` runs slowly on M1/M2 Macs, please use the legacy Keras optimizer instead, located at `tf.keras.optimizers.legacy.SGD`.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Filter Coefficients: [9.555339, 8.4639845]\n",
      "\n",
      "\n",
      "######################################################################\n",
      "############################ SNR: 45.0 dB ###########################\n",
      "######################################################################\n",
      "\n",
      "\n",
      "Epoch 1/20\n",
      "1/1 [==============================] - 1s 884ms/step - loss: 58.6649 - mse_known: 8.0092e-06 - mse_unknown: 0.0977 - lr: 0.0100\n",
      "Epoch 2/20\n",
      "1/1 [==============================] - 1s 825ms/step - loss: 57.7832 - mse_known: 8.0078e-06 - mse_unknown: 0.0977 - lr: 0.0100\n",
      "Epoch 3/20\n",
      "1/1 [==============================] - 1s 822ms/step - loss: 56.9138 - mse_known: 8.0064e-06 - mse_unknown: 0.0977 - lr: 0.0100\n",
      "Epoch 4/20\n",
      "1/1 [==============================] - 1s 823ms/step - loss: 56.0576 - mse_known: 8.0045e-06 - mse_unknown: 0.0976 - lr: 0.0100\n",
      "Epoch 5/20\n",
      "1/1 [==============================] - 1s 830ms/step - loss: 55.2142 - mse_known: 8.0033e-06 - mse_unknown: 0.0976 - lr: 0.0100\n",
      "Epoch 6/20\n",
      "1/1 [==============================] - 1s 834ms/step - loss: 54.3836 - mse_known: 8.0013e-06 - mse_unknown: 0.0976 - lr: 0.0100\n",
      "Epoch 7/20\n",
      "1/1 [==============================] - 1s 830ms/step - loss: 53.5654 - mse_known: 7.9996e-06 - mse_unknown: 0.0976 - lr: 0.0100\n",
      "Epoch 8/20\n",
      "1/1 [==============================] - 1s 836ms/step - loss: 52.7596 - mse_known: 7.9991e-06 - mse_unknown: 0.0976 - lr: 0.0100\n",
      "Epoch 9/20\n",
      "1/1 [==============================] - 1s 833ms/step - loss: 51.9660 - mse_known: 7.9974e-06 - mse_unknown: 0.0975 - lr: 0.0100\n",
      "Epoch 10/20\n",
      "1/1 [==============================] - 1s 855ms/step - loss: 51.1843 - mse_known: 7.9957e-06 - mse_unknown: 0.0975 - lr: 0.0100\n",
      "Epoch 11/20\n",
      "1/1 [==============================] - 1s 843ms/step - loss: 50.4143 - mse_known: 7.9945e-06 - mse_unknown: 0.0975 - lr: 0.0096\n",
      "Epoch 12/20\n",
      "1/1 [==============================] - 1s 814ms/step - loss: 49.6850 - mse_known: 7.9933e-06 - mse_unknown: 0.0975 - lr: 0.0092\n",
      "Epoch 13/20\n",
      "1/1 [==============================] - 1s 826ms/step - loss: 48.9939 - mse_known: 7.9922e-06 - mse_unknown: 0.0975 - lr: 0.0089\n",
      "Epoch 14/20\n",
      "1/1 [==============================] - 1s 899ms/step - loss: 48.3384 - mse_known: 7.9913e-06 - mse_unknown: 0.0975 - lr: 0.0085\n",
      "Epoch 15/20\n",
      "1/1 [==============================] - 1s 823ms/step - loss: 47.7166 - mse_known: 7.9904e-06 - mse_unknown: 0.0975 - lr: 0.0082\n",
      "Epoch 16/20\n",
      "1/1 [==============================] - 1s 815ms/step - loss: 47.1262 - mse_known: 7.9885e-06 - mse_unknown: 0.0974 - lr: 0.0079\n",
      "Epoch 17/20\n",
      "1/1 [==============================] - 1s 825ms/step - loss: 46.5656 - mse_known: 7.9887e-06 - mse_unknown: 0.0974 - lr: 0.0076\n",
      "Epoch 18/20\n",
      "1/1 [==============================] - 1s 821ms/step - loss: 46.0329 - mse_known: 7.9875e-06 - mse_unknown: 0.0974 - lr: 0.0073\n",
      "Epoch 19/20\n",
      "1/1 [==============================] - 1s 851ms/step - loss: 45.5265 - mse_known: 7.9871e-06 - mse_unknown: 0.0974 - lr: 0.0070\n",
      "Epoch 20/20\n",
      "1/1 [==============================] - 1s 888ms/step - loss: 45.0449 - mse_known: 7.9861e-06 - mse_unknown: 0.0970 - lr: 0.0068\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:At this time, the v2.11+ optimizer `tf.keras.optimizers.SGD` runs slowly on M1/M2 Macs, please use the legacy Keras optimizer instead, located at `tf.keras.optimizers.legacy.SGD`.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Filter Coefficients: [9.555339, 8.463984]\n",
      "\n",
      "\n",
      "######################################################################\n",
      "############################ SNR: 50.0 dB ###########################\n",
      "######################################################################\n",
      "\n",
      "\n",
      "Epoch 1/20\n",
      "1/1 [==============================] - 1s 881ms/step - loss: 58.6649 - mse_known: 2.5655e-06 - mse_unknown: 0.0980 - lr: 0.0100\n",
      "Epoch 2/20\n",
      "1/1 [==============================] - 1s 851ms/step - loss: 57.7831 - mse_known: 2.5650e-06 - mse_unknown: 0.0979 - lr: 0.0100\n",
      "Epoch 3/20\n",
      "1/1 [==============================] - 1s 909ms/step - loss: 56.9138 - mse_known: 2.5633e-06 - mse_unknown: 0.0979 - lr: 0.0100\n",
      "Epoch 4/20\n",
      "1/1 [==============================] - 1s 1s/step - loss: 56.0575 - mse_known: 2.5614e-06 - mse_unknown: 0.0979 - lr: 0.0100\n",
      "Epoch 5/20\n",
      "1/1 [==============================] - 1s 830ms/step - loss: 55.2142 - mse_known: 2.5601e-06 - mse_unknown: 0.0979 - lr: 0.0100\n",
      "Epoch 6/20\n",
      "1/1 [==============================] - 1s 828ms/step - loss: 54.3835 - mse_known: 2.5588e-06 - mse_unknown: 0.0979 - lr: 0.0100\n",
      "Epoch 7/20\n",
      "1/1 [==============================] - 1s 917ms/step - loss: 53.5654 - mse_known: 2.5577e-06 - mse_unknown: 0.0978 - lr: 0.0100\n",
      "Epoch 8/20\n",
      "1/1 [==============================] - 1s 808ms/step - loss: 52.7596 - mse_known: 2.5570e-06 - mse_unknown: 0.0978 - lr: 0.0100\n",
      "Epoch 9/20\n",
      "1/1 [==============================] - 1s 811ms/step - loss: 51.9659 - mse_known: 2.5550e-06 - mse_unknown: 0.0978 - lr: 0.0100\n",
      "Epoch 10/20\n",
      "1/1 [==============================] - 1s 813ms/step - loss: 51.1842 - mse_known: 2.5544e-06 - mse_unknown: 0.0978 - lr: 0.0100\n",
      "Epoch 11/20\n",
      "1/1 [==============================] - 1s 802ms/step - loss: 50.4143 - mse_known: 2.5533e-06 - mse_unknown: 0.0978 - lr: 0.0096\n",
      "Epoch 12/20\n",
      "1/1 [==============================] - 1s 818ms/step - loss: 49.6850 - mse_known: 2.5522e-06 - mse_unknown: 0.0977 - lr: 0.0092\n",
      "Epoch 13/20\n",
      "1/1 [==============================] - 1s 823ms/step - loss: 48.9938 - mse_known: 2.5506e-06 - mse_unknown: 0.0977 - lr: 0.0089\n",
      "Epoch 14/20\n",
      "1/1 [==============================] - 1s 883ms/step - loss: 48.3384 - mse_known: 2.5505e-06 - mse_unknown: 0.0976 - lr: 0.0085\n",
      "Epoch 15/20\n",
      "1/1 [==============================] - 1s 1s/step - loss: 47.7165 - mse_known: 2.5500e-06 - mse_unknown: 0.0977 - lr: 0.0082\n",
      "Epoch 16/20\n",
      "1/1 [==============================] - 1s 909ms/step - loss: 47.1262 - mse_known: 2.5491e-06 - mse_unknown: 0.0977 - lr: 0.0079\n",
      "Epoch 17/20\n",
      "1/1 [==============================] - 1s 934ms/step - loss: 46.5656 - mse_known: 2.5480e-06 - mse_unknown: 0.0977 - lr: 0.0076\n",
      "Epoch 18/20\n",
      "1/1 [==============================] - 1s 1s/step - loss: 46.0329 - mse_known: 2.5473e-06 - mse_unknown: 0.0977 - lr: 0.0073\n",
      "Epoch 19/20\n",
      "1/1 [==============================] - 1s 965ms/step - loss: 45.5265 - mse_known: 2.5463e-06 - mse_unknown: 0.0976 - lr: 0.0070\n",
      "Epoch 20/20\n",
      "1/1 [==============================] - 1s 917ms/step - loss: 45.0448 - mse_known: 2.5463e-06 - mse_unknown: 0.0976 - lr: 0.0068\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:At this time, the v2.11+ optimizer `tf.keras.optimizers.SGD` runs slowly on M1/M2 Macs, please use the legacy Keras optimizer instead, located at `tf.keras.optimizers.legacy.SGD`.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Filter Coefficients: [9.555339, 8.463984]\n",
      "\n",
      "\n",
      "######################################################################\n",
      "############################ SNR: 55.0 dB ###########################\n",
      "######################################################################\n",
      "\n",
      "\n",
      "Epoch 1/20\n",
      "1/1 [==============================] - 1s 971ms/step - loss: 58.6649 - mse_known: 8.5863e-07 - mse_unknown: 0.0978 - lr: 0.0100\n",
      "Epoch 2/20\n",
      "1/1 [==============================] - 1s 857ms/step - loss: 57.7831 - mse_known: 8.5722e-07 - mse_unknown: 0.0977 - lr: 0.0100\n",
      "Epoch 3/20\n",
      "1/1 [==============================] - 1s 839ms/step - loss: 56.9138 - mse_known: 8.5566e-07 - mse_unknown: 0.0977 - lr: 0.0100\n",
      "Epoch 4/20\n",
      "1/1 [==============================] - 1s 867ms/step - loss: 56.0575 - mse_known: 8.5433e-07 - mse_unknown: 0.0977 - lr: 0.0100\n",
      "Epoch 5/20\n",
      "1/1 [==============================] - 1s 824ms/step - loss: 55.2142 - mse_known: 8.5283e-07 - mse_unknown: 0.0977 - lr: 0.0100\n",
      "Epoch 6/20\n",
      "1/1 [==============================] - 1s 847ms/step - loss: 54.3835 - mse_known: 8.5153e-07 - mse_unknown: 0.0977 - lr: 0.0100\n",
      "Epoch 7/20\n",
      "1/1 [==============================] - 1s 841ms/step - loss: 53.5654 - mse_known: 8.5011e-07 - mse_unknown: 0.0977 - lr: 0.0100\n",
      "Epoch 8/20\n",
      "1/1 [==============================] - 1s 805ms/step - loss: 52.7596 - mse_known: 8.4901e-07 - mse_unknown: 0.0977 - lr: 0.0100\n",
      "Epoch 9/20\n",
      "1/1 [==============================] - 1s 849ms/step - loss: 51.9659 - mse_known: 8.4749e-07 - mse_unknown: 0.0976 - lr: 0.0100\n",
      "Epoch 10/20\n",
      "1/1 [==============================] - 1s 816ms/step - loss: 51.1842 - mse_known: 8.4650e-07 - mse_unknown: 0.0977 - lr: 0.0100\n",
      "Epoch 11/20\n",
      "1/1 [==============================] - 1s 879ms/step - loss: 50.4143 - mse_known: 8.4610e-07 - mse_unknown: 0.0974 - lr: 0.0096\n",
      "Epoch 12/20\n",
      "1/1 [==============================] - 1s 838ms/step - loss: 49.6850 - mse_known: 8.4432e-07 - mse_unknown: 0.0977 - lr: 0.0092\n",
      "Epoch 13/20\n",
      "1/1 [==============================] - 1s 815ms/step - loss: 48.9938 - mse_known: 8.4335e-07 - mse_unknown: 0.0976 - lr: 0.0089\n",
      "Epoch 14/20\n",
      "1/1 [==============================] - 1s 924ms/step - loss: 48.3384 - mse_known: 8.4239e-07 - mse_unknown: 0.0976 - lr: 0.0085\n",
      "Epoch 15/20\n",
      "1/1 [==============================] - 1s 912ms/step - loss: 47.7165 - mse_known: 8.4137e-07 - mse_unknown: 0.0976 - lr: 0.0082\n",
      "Epoch 16/20\n",
      "1/1 [==============================] - 1s 885ms/step - loss: 47.1262 - mse_known: 8.4056e-07 - mse_unknown: 0.0976 - lr: 0.0079\n",
      "Epoch 17/20\n",
      "1/1 [==============================] - 1s 885ms/step - loss: 46.5656 - mse_known: 8.3966e-07 - mse_unknown: 0.0976 - lr: 0.0076\n",
      "Epoch 18/20\n",
      "1/1 [==============================] - 1s 852ms/step - loss: 46.0328 - mse_known: 8.3896e-07 - mse_unknown: 0.0976 - lr: 0.0073\n",
      "Epoch 19/20\n",
      "1/1 [==============================] - 1s 857ms/step - loss: 45.5265 - mse_known: 8.3826e-07 - mse_unknown: 0.0976 - lr: 0.0070\n",
      "Epoch 20/20\n",
      "1/1 [==============================] - 1s 855ms/step - loss: 45.0448 - mse_known: 8.3731e-07 - mse_unknown: 0.0976 - lr: 0.0068\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:At this time, the v2.11+ optimizer `tf.keras.optimizers.SGD` runs slowly on M1/M2 Macs, please use the legacy Keras optimizer instead, located at `tf.keras.optimizers.legacy.SGD`.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Filter Coefficients: [9.555339, 8.463984]\n",
      "\n",
      "\n",
      "######################################################################\n",
      "############################ SNR: 60.0 dB ###########################\n",
      "######################################################################\n",
      "\n",
      "\n",
      "Epoch 1/20\n",
      "1/1 [==============================] - 1s 887ms/step - loss: 58.6649 - mse_known: 3.1181e-07 - mse_unknown: 0.0979 - lr: 0.0100\n",
      "Epoch 2/20\n",
      "1/1 [==============================] - 1s 851ms/step - loss: 57.7831 - mse_known: 3.1037e-07 - mse_unknown: 0.0979 - lr: 0.0100\n",
      "Epoch 3/20\n",
      "1/1 [==============================] - 1s 855ms/step - loss: 56.9138 - mse_known: 3.0849e-07 - mse_unknown: 0.0977 - lr: 0.0100\n",
      "Epoch 4/20\n",
      "1/1 [==============================] - 1s 857ms/step - loss: 56.0575 - mse_known: 3.0724e-07 - mse_unknown: 0.0978 - lr: 0.0100\n",
      "Epoch 5/20\n",
      "1/1 [==============================] - 1s 873ms/step - loss: 55.2142 - mse_known: 3.0576e-07 - mse_unknown: 0.0978 - lr: 0.0100\n",
      "Epoch 6/20\n",
      "1/1 [==============================] - 1s 845ms/step - loss: 54.3835 - mse_known: 3.0468e-07 - mse_unknown: 0.0978 - lr: 0.0100\n",
      "Epoch 7/20\n",
      "1/1 [==============================] - 1s 873ms/step - loss: 53.5654 - mse_known: 3.0327e-07 - mse_unknown: 0.0978 - lr: 0.0100\n",
      "Epoch 8/20\n",
      "1/1 [==============================] - 1s 845ms/step - loss: 52.7596 - mse_known: 3.0207e-07 - mse_unknown: 0.0978 - lr: 0.0100\n",
      "Epoch 9/20\n",
      "1/1 [==============================] - 1s 833ms/step - loss: 51.9659 - mse_known: 3.0062e-07 - mse_unknown: 0.0977 - lr: 0.0100\n",
      "Epoch 10/20\n",
      "1/1 [==============================] - 1s 888ms/step - loss: 51.1842 - mse_known: 2.9939e-07 - mse_unknown: 0.0977 - lr: 0.0100\n",
      "Epoch 11/20\n",
      "1/1 [==============================] - 1s 852ms/step - loss: 50.4143 - mse_known: 2.9862e-07 - mse_unknown: 0.0977 - lr: 0.0096\n",
      "Epoch 12/20\n",
      "1/1 [==============================] - 1s 837ms/step - loss: 49.6850 - mse_known: 2.9715e-07 - mse_unknown: 0.0977 - lr: 0.0092\n",
      "Epoch 13/20\n",
      "1/1 [==============================] - 1s 848ms/step - loss: 48.9938 - mse_known: 2.9588e-07 - mse_unknown: 0.0976 - lr: 0.0089\n",
      "Epoch 14/20\n",
      "1/1 [==============================] - 1s 892ms/step - loss: 48.3383 - mse_known: 2.9499e-07 - mse_unknown: 0.0976 - lr: 0.0085\n",
      "Epoch 15/20\n",
      "1/1 [==============================] - 1s 825ms/step - loss: 47.7165 - mse_known: 2.9398e-07 - mse_unknown: 0.0976 - lr: 0.0082\n",
      "Epoch 16/20\n",
      "1/1 [==============================] - 1s 816ms/step - loss: 47.1262 - mse_known: 2.9328e-07 - mse_unknown: 0.0976 - lr: 0.0079\n",
      "Epoch 17/20\n",
      "1/1 [==============================] - 1s 838ms/step - loss: 46.5656 - mse_known: 2.9260e-07 - mse_unknown: 0.0976 - lr: 0.0076\n",
      "Epoch 18/20\n",
      "1/1 [==============================] - 1s 811ms/step - loss: 46.0328 - mse_known: 2.9194e-07 - mse_unknown: 0.0976 - lr: 0.0073\n",
      "Epoch 19/20\n",
      "1/1 [==============================] - 1s 848ms/step - loss: 45.5264 - mse_known: 2.9106e-07 - mse_unknown: 0.0976 - lr: 0.0070\n",
      "Epoch 20/20\n",
      "1/1 [==============================] - 1s 799ms/step - loss: 45.0448 - mse_known: 2.9051e-07 - mse_unknown: 0.0976 - lr: 0.0068\n",
      "\n",
      "Filter Coefficients: [9.555339, 8.463984]\n"
     ]
    }
   ],
   "source": [
    "for i_sen, rem in enumerate(sensing_ratio):\n",
    "    \n",
    "    print(f\"################################### Sensing Ratio: {rem * 100}% ###################################\")\n",
    "    \n",
    "    X_train_missing = np.zeros([no_of_psi, N, T])\n",
    "    X_train_concatenated = np.zeros([no_of_psi, N, 2 * T])\n",
    "    \n",
    "    if i_sen == 0:\n",
    "        M = int(rem * T)\n",
    "        for i in range(no_of_psi):\n",
    "            psi_k = np.array([0] * (N * M) + [1] * (N * (T - M)))\n",
    "            np.random.shuffle(psi_k)\n",
    "            psi_k = psi_k.reshape([N, T])\n",
    "            all_psi.append(psi_k)\n",
    "            X_train_missing[i, : , : ] = X_train * psi_k\n",
    "            X_train_concatenated[i, :, :] = np.concatenate((X_train_missing[i], psi_k), axis = 1)\n",
    "\n",
    "    else:\n",
    "        previous_psi = all_psi[-no_of_psi : ]\n",
    "        \n",
    "        rem_diff = int(N * (rem - sensing_ratio[i_sen - 1]) * T)\n",
    "        \n",
    "        for i in range(no_of_psi):\n",
    "            psi_k_tmp = np.array(previous_psi[i]).flatten()\n",
    "            ones_idx = np.where(psi_k_tmp == 1)\n",
    "            \n",
    "            ones_to_zero_idx = np.random.choice(ones_idx[0], size = rem_diff)\n",
    "            psi_k_tmp[ones_to_zero_idx] = 0\n",
    "            psi_k = psi_k_tmp\n",
    "            \n",
    "            psi_k = psi_k.reshape([N, T])\n",
    "            all_psi.append(psi_k)\n",
    "            X_train_missing[i, : , : ] = X_train * psi_k\n",
    "            X_train_concatenated[i, :, :] = np.concatenate((X_train_missing[i], psi_k), axis = 1)\n",
    "    \n",
    "    for i_snr, snr_in_dB in enumerate(SNR_list):\n",
    "        print(f\"\\n\\n######################################################################\")\n",
    "        print(f\"############################ SNR: {snr_in_dB} dB ###########################\")\n",
    "        print(f\"######################################################################\\n\\n\")\n",
    "        \n",
    "        coeffs = coeffs_list[i_snr, :]\n",
    "        \n",
    "        sgd_optimizer = tf.keras.optimizers.SGD(learning_rate = 0.01, momentum = 0.001)\n",
    "        \n",
    "        our_model = ProposedModel(Lap_init, reg_init, [loop_a, loop_b, loop_c], \n",
    "                                  d, p_init, alpha_init, beta_init, threshold_init, name = 'our')\n",
    "        our_model.compile(optimizer = sgd_optimizer, loss = costfunc,\n",
    "                          metrics = [mse_known, mse_unknown], run_eagerly=True)\n",
    "        \n",
    "        # Adding noise to data\n",
    "        snr = 10 ** (-snr_in_dB / 10)\n",
    "        \n",
    "#         noise_matrix = np.array([np.random.normal(loc = 0.0, \n",
    "#                                                   scale = np.sqrt(snr * X_train_variance[i]), \n",
    "#                                                   size = [no_of_psi, T])\n",
    "#                                  for i in range(len(X_train_variance))])\n",
    "        \n",
    "#         noise_matrix = np.swapaxes(noise_matrix, 0, 1)\n",
    "        \n",
    "        noise_matrix = np.random.normal(loc = 0.0, \n",
    "                                        scale = np.sqrt(snr * X_train_variance),\n",
    "                                       size = length).reshape([no_of_psi, N, T])\n",
    "        \n",
    "        X_train_concatenated_noisy = np.copy(X_train_concatenated)\n",
    "        X_train_concatenated_noisy[:, :, : T] += noise_matrix\n",
    "        \n",
    "        our_model.fit(X_train_concatenated_noisy, X_train_missing, epochs = 20, \n",
    "                      callbacks = [lr_scheduler], batch_size = 1)\n",
    "\n",
    "        var = our_model.variables\n",
    "        var_lst = []\n",
    "        for v in var:\n",
    "            var_lst.append(v.numpy()[0, 0])\n",
    "        print(f\"\\nFilter Coefficients:\", var_lst)\n",
    "        all_vars.append(var_lst)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "11291187",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For SNR of 0.0 dB :  [9.555124, 8.463255]\n",
      "For SNR of 5.0 dB :  [9.555291, 8.463836]\n",
      "For SNR of 10.0 dB :  [9.555325, 8.463954]\n",
      "For SNR of 15.0 dB :  [9.555336, 8.463973]\n",
      "For SNR of 20.0 dB :  [9.555338, 8.463981]\n",
      "For SNR of 25.0 dB :  [9.555338, 8.463983]\n",
      "For SNR of 30.0 dB :  [9.555338, 8.463983]\n",
      "For SNR of 35.0 dB :  [9.555339, 8.4639845]\n",
      "For SNR of 40.0 dB :  [9.555339, 8.4639845]\n",
      "For SNR of 45.0 dB :  [9.555339, 8.463984]\n",
      "For SNR of 50.0 dB :  [9.555339, 8.463984]\n",
      "For SNR of 55.0 dB :  [9.555339, 8.463984]\n",
      "For SNR of 60.0 dB :  [9.555339, 8.463984]\n"
     ]
    }
   ],
   "source": [
    "for i, v in enumerate(all_vars):\n",
    "    print(f\"For SNR of {SNR_list[i]} dB : \", v)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1a56b1b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.save('./Outputs/snr_learned_graph.npy', learned_graph)\n",
    "# np.save('./Outputs/snr_mse_known.npy', mse_known_list)\n",
    "# np.save('./Outputs/snr_mse_unknown.npy', mse_unknown_list)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
